#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Rparser
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     5,     6,     7,    20,    26,    22,    18,    21,    34,    23,
    13,    11,     9,    10,    12,     5,     6,     7,    14,    15,
     8,    24,    25,    16,    27,    28,    29,    30,    23,    33,
     3,    35 ]

racc_action_check = [
    31,    31,    31,    11,    17,    11,    11,    11,    31,    11,
     7,     7,     7,     7,     7,     2,     2,     2,     9,     9,
     3,    12,    15,    10,    18,    19,    21,    22,    25,    30,
     1,    32 ]

racc_action_pointer = [
   nil,    30,    13,    20,   nil,   nil,   nil,     7,   nil,    15,
    20,     0,    18,   nil,   nil,    17,   nil,     1,    21,    22,
   nil,    23,    19,   nil,   nil,    19,   nil,   nil,   nil,   nil,
    24,    -2,    28,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -18,    -1,   -18,    -3,    -4,    -5,   -18,    36,   -18,
   -18,   -18,   -18,   -13,    -6,   -18,    -7,   -18,   -18,   -18,
   -11,   -18,   -18,    -2,   -12,   -18,    -8,    -9,   -10,   -14,
   -18,   -18,   -18,   -16,   -17,   -15 ]

racc_goto_table = [
     2,    17,     1,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    31 ]

racc_goto_check = [
     2,     4,     1,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil,   -10,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,     4,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 12, :_reduce_1,
  0, 13, :_reduce_none,
  2, 13, :_reduce_3,
  1, 14, :_reduce_4,
  1, 14, :_reduce_none,
  3, 14, :_reduce_6,
  3, 14, :_reduce_7,
  4, 14, :_reduce_8,
  4, 14, :_reduce_9,
  4, 14, :_reduce_10,
  3, 14, :_reduce_11,
  3, 14, :_reduce_12,
  2, 14, :_reduce_13,
  4, 14, :_reduce_14,
  6, 14, :_reduce_15,
  3, 16, :_reduce_none,
  3, 15, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 36

racc_token_table = {
  false => 0,
  :error => 1,
  :comment => 2,
  :semicolon => 3,
  :keyword => 4,
  :ipaddress => 5,
  :integer => 6,
  :string => 7,
  :comma => 8,
  :lcurly => 9,
  :rcurly => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "comment",
  "semicolon",
  "keyword",
  "ipaddress",
  "integer",
  "string",
  "comma",
  "lcurly",
  "rcurly",
  "$start",
  "document",
  "statements",
  "statement",
  "block",
  "iplist" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 puts "BOOM1"; return val 
    result
end

# reduce 2 omitted

def _reduce_3(val, _values, result)
                   if val[0]
                     puts "statements"
                     return val[0] << val[1]
                   end
                   if val[1]
                     puts "statement"
                     return [val[1]]
                   end
                 
    result
end

def _reduce_4(val, _values, result)
 return { :comment => val[0] } 
    result
end

# reduce 5 omitted

def _reduce_6(val, _values, result)
 return { val[0] => val[1] } 
    result
end

def _reduce_7(val, _values, result)
 return { val[0] => val[1] } 
    result
end

def _reduce_8(val, _values, result)
 return { val[0] => { val[1] => val[2] } } 
    result
end

def _reduce_9(val, _values, result)
 return { val[0] => { val[1] => val[2] } } 
    result
end

def _reduce_10(val, _values, result)
 return { val[0] => { val[1] => val[2] } } 
    result
end

def _reduce_11(val, _values, result)
 return { val[0] => val[1] } 
    result
end

def _reduce_12(val, _values, result)
 return { val[0] => val[1] } 
    result
end

def _reduce_13(val, _values, result)
 return { val[0] => true } 
    result
end

def _reduce_14(val, _values, result)
 return { val[0] => { val[1] => val[2] } } 
    result
end

def _reduce_15(val, _values, result)
 return { val[0] => val[1], val[2] => val[3], :block => val[4] } 
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
 return val[1] 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rparser
